{
    "title": "Frontend Developer Interview",
    "questions": [
        "Tell me about a complex React integration you built — what made it challenging?",
        "How do you handle communication between a parent app and embedded content (e.g., iframe or worker)?",
        "How do you ensure data sent between contexts is secure and validated?",
        "How do you debug client-side issues that only occur in production?",
        "How do you measure and improve frontend performance?",
        "What’s your approach to managing global state efficiently?",
        "Describe a time you optimized rendering in a large React app."
    ],
    "codingChallenge": {
        "prompt": "Create a React component where a simulated child frame (no real iframe, just a mocked event) sends analytics events to the parent app using postMessage. The parent:\n\n* Listens for these events\n* Validates that they follow the schema\n* Displays them in a list\n\nYou’ll get a minimal template, and then the expected full answer.",
        "template": "// App.tsx\n// Task:\n// 1. Listen for \"analytics:event\" messages sent via window.postMessage.\n// 2. Only accept messages with { type: \"analytics:event\", name: string, ts: number }.\n// 3. Display each valid event name in a list.\n// 4. Clean up listeners on unmount.\n// 5. (Bonus) Simulate sending an event when clicking a button.\n\nimport React, { useEffect, useState } from \"react\";\n\nexport default function App() {\n  const [events, setEvents] = useState<string[]>([]);\n\n  // your code here\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>Analytics Event Receiver</h2>\n      {/* add button and list here */}\n    </div>\n  );\n}",
        "answer": "import React, { useEffect, useState } from \"react\";\n\nexport default function App() {\n  const [events, setEvents] = useState<string[]>([]);\n\n  useEffect(() => {\n    const handleMessage = (e: MessageEvent) => {\n      if (e.data?.type !== \"analytics:event\") return;\n      if (typeof e.data.name !== \"string\" || typeof e.data.ts !== \"number\") return;\n      setEvents(prev => [...prev, e.data.name]);\n    };\n    window.addEventListener(\"message\", handleMessage);\n    return () => window.removeEventListener(\"message\", handleMessage);\n  }, []);\n\n  const sendMockEvent = () => {\n    const event = { type: \"analytics:event\", name: \"ButtonClicked\", ts: Date.now() };\n    window.postMessage(event, \"*\");\n  };\n\n  return (\n    <div style={{ padding: 20, fontFamily: \"sans-serif\" }}>\n      <h2>Analytics Event Receiver</h2>\n      <button onClick={sendMockEvent}>Simulate Event</button>\n      <ul style={{ marginTop: 20 }}>\n        {events.map((name, i) => (<li key={i}>{name}</li>))}\n      </ul>\n    </div>\n  );\n}"
    }
}
