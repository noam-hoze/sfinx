generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole           @default(CANDIDATE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  applications      Application[]
  candidateProfile  CandidateProfile?
  companyProfile    CompanyProfile?
  interviewSessions InterviewSession[]
}

model CandidateProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  jobTitle   String?
  location   String?
  bio        String?
  resume     String?
  linkedin   String?
  github     String?
  portfolio  String?
  experience String?
  skills     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyProfile {
  id          String      @id @default(cuid())
  userId      String      @unique
  companyName String
  companySize CompanySize
  location    String?
  bio         String?
  website     String?
  linkedin    String?
  industry    String?
  founded     Int?
  description String?
  benefits    String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String      @id @default(cuid())
  name        String      @unique
  logo        String?
  industry    String
  locations   String[]
  cultureTags String[]
  size        CompanySize
  website     String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  jobs        Job[]
}

model Job {
  id           String        @id @default(cuid())
  title        String
  type         JobType
  location     String
  salary       String?
  description  String?
  requirements String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  companyId    String
  applications Application[]
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Application {
  id               String            @id @default(cuid())
  status           ApplicationStatus @default(PENDING)
  appliedAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  candidateId      String
  jobId            String
  candidate        User              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job              Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviewSessions InterviewSession[]

  @@unique([candidateId, jobId])
}

model InterviewSession {
  id            String         @id @default(cuid())
  candidateId   String
  applicationId String
  videoUrl      String?
  startedAt     DateTime       @default(now())
  completedAt   DateTime?
  duration      Int?
  status        String         @default("IN_PROGRESS")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  candidate     User           @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  telemetryData TelemetryData?
}

model TelemetryData {
  id                 String            @id @default(cuid())
  interviewSessionId String            @unique
  matchScore         Int
  confidence         String
  story              String
  hasFairnessFlag    Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  // New analytics series stored as JSON arrays
  persistenceFlow    Json?
  learningToAction   Json?
  confidenceCurve    Json?
  evidenceClips      EvidenceClip[]
  gapAnalysis        GapAnalysis?
  interviewSession   InterviewSession  @relation(fields: [interviewSessionId], references: [id], onDelete: Cascade)
  videoChapters      VideoChapter[]
  workstyleMetrics   WorkstyleMetrics?
}

model WorkstyleMetrics {
  id               String        @id @default(cuid())
  telemetryDataId  String        @unique
  iterationSpeed   Int
  debugLoops       Int
  refactorCleanups Int
  aiAssistUsage    Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  telemetryData    TelemetryData @relation(fields: [telemetryDataId], references: [id], onDelete: Cascade)
}

model GapAnalysis {
  id              String        @id @default(cuid())
  telemetryDataId String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  gaps            Gap[]         @relation("GapAnalysisGaps")
  telemetryData   TelemetryData @relation(fields: [telemetryDataId], references: [id], onDelete: Cascade)
}

model Gap {
  id            String      @id @default(cuid())
  gapAnalysisId String
  severity      String
  description   String
  color         String
  evidenceLinks Int[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  gapAnalysis   GapAnalysis @relation("GapAnalysisGaps", fields: [gapAnalysisId], references: [id], onDelete: Cascade)
}

model EvidenceClip {
  id              String        @id @default(cuid())
  telemetryDataId String
  title           String
  thumbnailUrl    String?
  duration        Int
  description     String
  startTime       Int?
  category        EvidenceCategory?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  telemetryData   TelemetryData @relation(fields: [telemetryDataId], references: [id], onDelete: Cascade)
}

model VideoChapter {
  id              String         @id @default(cuid())
  telemetryDataId String
  title           String
  startTime       Int
  endTime         Int
  description     String
  thumbnailUrl    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  captions        VideoCaption[] @relation("VideoChapterCaptions")
  telemetryData   TelemetryData  @relation(fields: [telemetryDataId], references: [id], onDelete: Cascade)
}

model VideoCaption {
  id             String       @id @default(cuid())
  videoChapterId String
  text           String
  startTime      Int
  endTime        Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  videoChapter   VideoChapter @relation("VideoChapterCaptions", fields: [videoChapterId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CANDIDATE
  COMPANY
  ADMIN
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWING
  ACCEPTED
  REJECTED
}

enum EvidenceCategory {
  ITERATION_SPEED
  DEBUG_LOOP
  REFACTOR_CLEANUPS
  AI_ASSIST_USAGE
}
