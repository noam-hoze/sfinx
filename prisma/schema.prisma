// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CANDIDATE
  COMPANY
  ADMIN
}

enum CompanySize {
  STARTUP      // 1-10 employees
  SMALL        // 11-50 employees
  MEDIUM       // 51-200 employees
  LARGE        // 201-1000 employees
  ENTERPRISE   // 1000+ employees
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CANDIDATE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Relations to specific user types
  candidateProfile CandidateProfile?
  companyProfile   CompanyProfile?

  // Applications (for candidates)
  applications     Application[]
}

model CandidateProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  jobTitle    String?
  location    String?
  bio         String?
  resume      String?  // File path or URL
  linkedin    String?
  github      String?
  portfolio   String?
  experience  String?  // Years of experience
  skills      String[] // Array of skills
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyProfile {
  id          String      @id @default(cuid())
  userId      String      @unique
  companyName String
  companySize CompanySize
  location    String?
  bio         String?
  website     String?
  linkedin    String?
  industry    String?
  founded     Int?       // Year founded
  description String?    // Detailed company description
  benefits    String[]   // Array of benefits offered
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

model Company {
  id          String      @id @default(cuid())
  name        String
  logo        String?
  industry    String
  locations   String[]    // Array of locations
  cultureTags String[]    // Array of culture tags
  size        CompanySize
  website     String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  jobs Job[]

  @@unique([name])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  type        JobType
  location    String
  salary      String?
  description String?
  requirements String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId   String
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  applications Application[]
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWING
  ACCEPTED
  REJECTED
}

model Application {
  id          String            @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  candidateId String
  candidate   User              @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  jobId       String
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
}
